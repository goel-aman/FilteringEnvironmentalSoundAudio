# -*- coding: utf-8 -*-
"""Samsung_Codes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c12ZkJDGkF5pA0e90FQHCmN4I-5q4Zmp
"""

import librosa
import librosa.display
from IPython.display import Audio
import IPython.display as ipd

from google.colab import drive
drive.mount('/content/drive')

#load audio files
audio_file = "/content/drive/My Drive/samsung_dataset/CleanSpeech_training/clnsp1.wav"
Audio(audio_file,autoplay=True)

#sr - sample rate - number of samples per second.
audio, sr = librosa.load(audio_file)

audio

audio.size

#duration of 1 sample
sample_duration = 1 / sr
print("Duration of 1 sample is : ",sample_duration," in seconds")

#duration of the audio signal in seconds
duration = sample_duration * len(audio)
print("Duration of signal is : ", duration," in seconds")

#visualize the waveform 
import matplotlib.pyplot as plt
# plt.figure(figsize=(15,17))
librosa.display.waveplot(audio)
plt.title("audio")

import numpy as np
FRAME_SIZE = 1024
#calculate the amplitude envelope
def amplitude_envelope(signal, frame_size):
  amplitude_envelope = []
  size = len(signal)
  #calculate AE for each frame
  for i in range(0,size,frame_size):
    current_frame_amplitude_envelope = max(signal[i:i+frame_size])
    amplitude_envelope.append(current_frame_amplitude_envelope)
  return np.array(amplitude_envelope)

ae_audio = amplitude_envelope(audio,FRAME_SIZE)
print(len(ae_audio))

import os
import librosa
import librosa.display
import IPython.display as ipd
import numpy as np
from IPython.display import Audio
import matplotlib.pyplot as plt

Audio(audio_file,autoplay=True)

#sr - sample rate - number of samples per second.
audio, sr = librosa.load(audio_file)

FRAME_SIZE = 2048
HOP_SIZE = 512 
audio_stft = librosa.stft(audio,n_fft = FRAME_SIZE, hop_length = HOP_SIZE)
audio_stft.shape

type(audio_stft[0][0])

audio_stf = np.abs(audio_stft) ** 2

type(audio_stf[0][0])

def plot_spectrogram(Y,sr,hop_length,y_axis ='linear'):
  plt.figure(figsize=(20,10))
  librosa.display.specshow(Y,
                           sr=sr,
                           hop_length=hop_length,
                           x_axis='time',
                           y_axis=y_axis)
  plt.colorbar(format="%+2.f")

plot_spectrogram(audio_stf,sr,HOP_SIZE)

audio_log_scale = librosa.power_to_db(audio_stf)
plot_spectrogram(audio_log_scale,sr,HOP_SIZE)

plot_spectrogram(audio_log_scale,sr,HOP_SIZE,y_axis='log')

